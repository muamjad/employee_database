
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 483475
 */
public class EmpDB extends javax.swing.JFrame {

    // instantiating variables for the program
    EmployeeInfo someEmp;
    MyHT EmployeeDatabase = new MyHT(10);
    boolean error = false; // to be used to check if there is an error during adding an employee
    int location = -1; // to be used for location variable
    EmployeeInfo searchEmp;
    EmployeeInfo searchEmp2; //to be used to search for employees
    boolean unpause = false; //to be used to control pausing

    /**
     * Creates new form EmpDB
     */
    public EmpDB() {
        initComponents();
        //this method makes components invisible because they will be made visible when appropriate
        toDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        employeeType = new javax.swing.ButtonGroup();
        numberType = new javax.swing.ButtonGroup();
        actionChooser = new javax.swing.JTabbedPane();
        toAdd = new javax.swing.JPanel();
        fiirstNameLabel = new javax.swing.JLabel();
        addEmpButton = new javax.swing.JButton();
        lastNameLabel = new javax.swing.JLabel();
        empNumLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lastNameBox = new javax.swing.JTextPane();
        autoButton = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        empNumBox = new javax.swing.JTextPane();
        deductionsLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        deductionsBox = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        firstNameBox = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseText = new javax.swing.JTextArea();
        partTimeButton = new javax.swing.JRadioButton();
        fullTimeButton = new javax.swing.JRadioButton();
        manualButton = new javax.swing.JRadioButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        salaryBox = new javax.swing.JTextPane();
        salaryLabel = new javax.swing.JLabel();
        wageLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        wageBox = new javax.swing.JTextPane();
        hoursLabel = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        hoursBox = new javax.swing.JTextPane();
        weeksLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        weeksBox = new javax.swing.JTextPane();
        locationPanel = new javax.swing.JPanel();
        mapNone = new javax.swing.JLabel();
        mapToronto = new javax.swing.JLabel();
        mapMississauga = new javax.swing.JLabel();
        mapBrampton = new javax.swing.JLabel();
        mapCaledon = new javax.swing.JLabel();
        mapVaughan = new javax.swing.JLabel();
        mapMarkham = new javax.swing.JLabel();
        locationSelector = new javax.swing.JComboBox();
        modifyEmpButton = new javax.swing.JButton();
        cancelModifyEmpButton = new javax.swing.JButton();
        cancelText = new javax.swing.JLabel();
        toSearch = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        searchBox = new javax.swing.JTextPane();
        searchButton = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        searchText = new javax.swing.JTextArea();
        toModify = new javax.swing.JPanel();
        modifyPrompt = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        modifyBox = new javax.swing.JTextPane();
        searchModifyButton = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        modifyText = new javax.swing.JTextArea();
        modifyButton = new javax.swing.JButton();
        cancelModifyButton = new javax.swing.JButton();
        toRemove = new javax.swing.JPanel();
        removePrompt = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        removeBox = new javax.swing.JTextPane();
        searchRemoveButton = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        removeText = new javax.swing.JTextArea();
        removeButton = new javax.swing.JButton();
        cancelRemoveButton = new javax.swing.JButton();
        toDisplay = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        readButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        fileText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toAdd.setEnabled(false);

        fiirstNameLabel.setText("First Name:");

        addEmpButton.setText("Add New Employee");
        addEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpButtonActionPerformed(evt);
            }
        });

        lastNameLabel.setText("Last Name:");

        empNumLabel.setText("Employee Number:");

        jScrollPane2.setViewportView(lastNameBox);

        numberType.add(autoButton);
        autoButton.setText("Automatic");
        autoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(empNumBox);

        deductionsLabel.setText("Deductions Rate:");

        jScrollPane4.setViewportView(deductionsBox);

        jScrollPane5.setViewportView(firstNameBox);

        jScrollPane1.setBorder(null);

        responseText.setEditable(false);
        responseText.setBackground(new java.awt.Color(214, 217, 223));
        responseText.setColumns(20);
        responseText.setLineWrap(true);
        responseText.setRows(5);
        responseText.setWrapStyleWord(true);
        responseText.setBorder(null);
        responseText.setCaretColor(new java.awt.Color(240, 240, 240));
        jScrollPane1.setViewportView(responseText);

        employeeType.add(partTimeButton);
        partTimeButton.setText("Part-Time");
        partTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partTimeButtonActionPerformed(evt);
            }
        });

        employeeType.add(fullTimeButton);
        fullTimeButton.setText("Full-Time");
        fullTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeButtonActionPerformed(evt);
            }
        });

        numberType.add(manualButton);
        manualButton.setText("Manual:");
        manualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualButtonActionPerformed(evt);
            }
        });

        jScrollPane6.setBorder(null);
        jScrollPane6.setViewportView(salaryBox);

        salaryLabel.setText("Annual Salary:");

        wageLabel.setText("Hourly wage:");

        jScrollPane7.setBorder(null);
        jScrollPane7.setViewportView(wageBox);

        hoursLabel.setText("Hours per week:");

        jScrollPane8.setBorder(null);
        jScrollPane8.setViewportView(hoursBox);

        weeksLabel.setText("Weeks per year:");

        jScrollPane9.setBorder(null);
        jScrollPane9.setViewportView(weeksBox);

        locationPanel.setLayout(new java.awt.CardLayout());

        mapNone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/map.png"))); // NOI18N
        mapNone.setText("jLabel1");
        locationPanel.add(mapNone, "mapN");

        mapToronto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapToronto.png"))); // NOI18N
        mapToronto.setText("jLabel2");
        locationPanel.add(mapToronto, "mapT");

        mapMississauga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapMississauga.png"))); // NOI18N
        mapMississauga.setText("jLabel1");
        locationPanel.add(mapMississauga, "mapM");

        mapBrampton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapBrampton.png"))); // NOI18N
        mapBrampton.setText("jLabel2");
        locationPanel.add(mapBrampton, "mapB");

        mapCaledon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapCaledon.png"))); // NOI18N
        mapCaledon.setText("jLabel3");
        locationPanel.add(mapCaledon, "mapC");

        mapVaughan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapVaughan.png"))); // NOI18N
        mapVaughan.setText("jLabel4");
        locationPanel.add(mapVaughan, "mapV");

        mapMarkham.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapMarkham.png"))); // NOI18N
        mapMarkham.setText("jLabel5");
        locationPanel.add(mapMarkham, "mapK");

        locationSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "~Select Location~", "Toronto", "Mississauga", "Brampton", "Caledon", "Vaughan", "Markham" }));
        locationSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationSelectorActionPerformed(evt);
            }
        });

        modifyEmpButton.setText("Modify Employeee");
        modifyEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyEmpButtonActionPerformed(evt);
            }
        });

        cancelModifyEmpButton.setText("Cancel");
        cancelModifyEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelModifyEmpButtonActionPerformed(evt);
            }
        });

        cancelText.setText("If you wish to not modify the employee, and return to the program's normal functions, click \"Cancel\"");

        javax.swing.GroupLayout toAddLayout = new javax.swing.GroupLayout(toAdd);
        toAdd.setLayout(toAddLayout);
        toAddLayout.setHorizontalGroup(
            toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(toAddLayout.createSequentialGroup()
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addGap(142, 142, 142)
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(salaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weeksLabel)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hoursLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(wageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane7)
                                    .addComponent(jScrollPane8))))
                        .addGap(32, 32, 32)
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(locationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(locationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 105, Short.MAX_VALUE))))
                    .addGroup(toAddLayout.createSequentialGroup()
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lastNameLabel))
                            .addComponent(empNumLabel)
                            .addComponent(deductionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fiirstNameLabel)
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(toAddLayout.createSequentialGroup()
                                        .addComponent(autoButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(manualButton))
                                    .addComponent(partTimeButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fullTimeButton)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cancelText, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                            .addGroup(toAddLayout.createSequentialGroup()
                                .addComponent(addEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(modifyEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelModifyEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        toAddLayout.setVerticalGroup(
            toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fiirstNameLabel)
                    .addComponent(lastNameLabel))
                .addGap(6, 6, 6)
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(toAddLayout.createSequentialGroup()
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(19, 19, 19)
                        .addComponent(empNumLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(autoButton)
                                .addComponent(manualButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(deductionsLabel))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partTimeButton)
                    .addComponent(fullTimeButton)
                    .addComponent(locationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(toAddLayout.createSequentialGroup()
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wageLabel)
                            .addComponent(salaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toAddLayout.createSequentialGroup()
                                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(hoursLabel)
                                    .addComponent(weeksLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(locationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(toAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEmpButton)
                    .addComponent(modifyEmpButton)
                    .addComponent(cancelModifyEmpButton))
                .addGap(32, 32, 32))
        );

        actionChooser.addTab("Information Form", toAdd);

        jLabel2.setText("Enter the employee number of the employee you want to search for:");

        jScrollPane15.setViewportView(searchBox);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jScrollPane16.setBorder(null);

        searchText.setEditable(false);
        searchText.setBackground(new java.awt.Color(214, 217, 223));
        searchText.setColumns(20);
        searchText.setLineWrap(true);
        searchText.setRows(5);
        searchText.setWrapStyleWord(true);
        searchText.setAutoscrolls(false);
        jScrollPane16.setViewportView(searchText);

        javax.swing.GroupLayout toSearchLayout = new javax.swing.GroupLayout(toSearch);
        toSearch.setLayout(toSearchLayout);
        toSearchLayout.setHorizontalGroup(
            toSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        toSearchLayout.setVerticalGroup(
            toSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        actionChooser.addTab("Search", toSearch);

        modifyPrompt.setText("Enter the employee number of the employee you want to modify:");

        jScrollPane11.setViewportView(modifyBox);

        searchModifyButton.setText("Search");
        searchModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchModifyButtonActionPerformed(evt);
            }
        });

        jScrollPane12.setBorder(null);

        modifyText.setEditable(false);
        modifyText.setBackground(new java.awt.Color(214, 217, 223));
        modifyText.setColumns(20);
        modifyText.setLineWrap(true);
        modifyText.setRows(5);
        modifyText.setWrapStyleWord(true);
        modifyText.setAutoscrolls(false);
        jScrollPane12.setViewportView(modifyText);

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        cancelModifyButton.setText("Cancel");
        cancelModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelModifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toModifyLayout = new javax.swing.GroupLayout(toModify);
        toModify.setLayout(toModifyLayout);
        toModifyLayout.setHorizontalGroup(
            toModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toModifyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modifyPrompt)
                    .addComponent(searchModifyButton)
                    .addGroup(toModifyLayout.createSequentialGroup()
                        .addComponent(modifyButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelModifyButton))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        toModifyLayout.setVerticalGroup(
            toModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toModifyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modifyPrompt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchModifyButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(toModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyButton)
                    .addComponent(cancelModifyButton))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        actionChooser.addTab("Modify", toModify);

        removePrompt.setText("Enter the employee number of the employee you wish to remove: ");

        jScrollPane13.setViewportView(removeBox);

        searchRemoveButton.setText("Search");
        searchRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRemoveButtonActionPerformed(evt);
            }
        });

        jScrollPane14.setBorder(null);

        removeText.setEditable(false);
        removeText.setBackground(new java.awt.Color(214, 217, 223));
        removeText.setColumns(20);
        removeText.setLineWrap(true);
        removeText.setRows(5);
        removeText.setWrapStyleWord(true);
        removeText.setAutoscrolls(false);
        jScrollPane14.setViewportView(removeText);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        cancelRemoveButton.setText("Cancel");
        cancelRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toRemoveLayout = new javax.swing.GroupLayout(toRemove);
        toRemove.setLayout(toRemoveLayout);
        toRemoveLayout.setHorizontalGroup(
            toRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toRemoveLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchRemoveButton)
                    .addGroup(toRemoveLayout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelRemoveButton))
                    .addComponent(removePrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        toRemoveLayout.setVerticalGroup(
            toRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toRemoveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removePrompt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchRemoveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(toRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(cancelRemoveButton))
                .addContainerGap(145, Short.MAX_VALUE))
        );

        actionChooser.addTab("Remove", toRemove);

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emp. No.", "First Name", "Last Name", "Deductions", "Location", "Net Income"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(displayTable);

        javax.swing.GroupLayout toDisplayLayout = new javax.swing.GroupLayout(toDisplay);
        toDisplay.setLayout(toDisplayLayout);
        toDisplayLayout.setHorizontalGroup(
            toDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );
        toDisplayLayout.setVerticalGroup(
            toDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        actionChooser.addTab("Display", toDisplay);

        readButton.setText("Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jScrollPane17.setBorder(null);

        fileText.setEditable(false);
        fileText.setBackground(new java.awt.Color(214, 217, 223));
        fileText.setColumns(20);
        fileText.setLineWrap(true);
        fileText.setRows(5);
        fileText.setWrapStyleWord(true);
        fileText.setBorder(null);
        fileText.setCaretColor(new java.awt.Color(240, 240, 240));
        jScrollPane17.setViewportView(fileText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionChooser)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(readButton)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane17)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(readButton)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //If manual is selected, it will allow the user to enter employee number manually
    private void manualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualButtonActionPerformed
        // TODO add your handling code here:
        if (manualButton.isSelected()) {
            empNumBox.setEnabled(true);
        }
    }//GEN-LAST:event_manualButtonActionPerformed

    //If the employee is full time, the components associated with a 
    //full time employee are made visible, while those that are not are made invisible 
    private void fullTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeButtonActionPerformed
        // TODO add your handling code here:
        wageLabel.setVisible(false);
        hoursLabel.setVisible(false);
        weeksLabel.setVisible(false);
        wageBox.setVisible(false);
        hoursBox.setVisible(false);
        weeksBox.setVisible(false);

        salaryLabel.setVisible(true);
        salaryBox.setVisible(true);
    }//GEN-LAST:event_fullTimeButtonActionPerformed

    //If the employee is part time, the components associated with a 
    //part time employee are made visible, while those that are not are made invisible 
    private void partTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partTimeButtonActionPerformed
        // TODO add your handling code here:
        salaryLabel.setVisible(false);
        salaryBox.setVisible(false);

        wageLabel.setVisible(true);
        hoursLabel.setVisible(true);
        weeksLabel.setVisible(true);
        wageBox.setVisible(true);
        hoursBox.setVisible(true);
        weeksBox.setVisible(true);
    }//GEN-LAST:event_partTimeButtonActionPerformed

    //If the auto button is selected, the user will not be able to enter employee number manually
    private void autoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoButtonActionPerformed
        // TODO add your handling code here:
        if (autoButton.isSelected()) {
            empNumBox.setEnabled(false);
        }
    }//GEN-LAST:event_autoButtonActionPerformed

    //This method is used to add an employee to the database, 
    //as well as when modifying employees or when reading from the file
    private void addEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpButtonActionPerformed
        // TODO add your handling code here:

        error = false; //this will be set to true if any data contained in the form is not acceptable
        int empNum = -1;
        double hours;
        double pay;
        double weeks;
        double dRate = 0;

        //try and catches are used to allow the form to attempt to read 
        //and format the data in as it should be entered, and if it is entered 
        //incorrectly, appropriate error messages will be shown
        try {
            if (Double.parseDouble(deductionsBox.getText()) < 1 && Double.parseDouble(deductionsBox.getText()) >= 0) {
                dRate = Double.parseDouble(deductionsBox.getText());
            } else {
                responseText.setText("The deductions rate must be a number between 0 and 1");
                error = true;
            }
        } catch (Exception ex) {
            responseText.setText("The deductions rate must be a number between 0 and 1");
            error = true;
        }

        if (autoButton.isSelected()) {
            for (int i = 1; empNum == -1; i++) {
                if (EmployeeDatabase.searchTable(i) == -1) {
                    empNum = i;
                }
            }
        } else {
            try {
                if (EmployeeDatabase.searchTable(Integer.parseInt(empNumBox.getText())) == -1) {
                    empNum = Integer.parseInt(empNumBox.getText());
                } else {
                    responseText.setText("An employee with that employee number already exists.");
                    error = true;
                    System.out.println("Test");
                }
            } catch (Exception ex) {
                responseText.setText("That is not a valid employee number.");
                error = true;
            }
        }

        if (location < 0) {
            error = true;
            responseText.setText("Please select a location from the drop down list");
        }
        if (partTimeButton.isSelected()) {
            try {
                pay = Double.parseDouble(wageBox.getText());
                hours = Double.parseDouble(hoursBox.getText());
                weeks = Double.parseDouble(weeksBox.getText());
                someEmp = new PartTimeEmployee(empNum, firstNameBox.getText(), lastNameBox.getText(), dRate, location, pay, hours, weeks);
            } catch (Exception ex) {
                responseText.setText("One or more text fields have been left empty or do not contain the correct type of data. Please make sure to enter information in all fields correctly.");
                error = true;
            }
        } else if (fullTimeButton.isSelected()) {
            try {
                pay = Double.parseDouble(salaryBox.getText());
                someEmp = new FullTimeEmployee(empNum, firstNameBox.getText(), lastNameBox.getText(), dRate, location, pay);
            } catch (Exception ex) {
                responseText.setText("One or more text fields have been left empty or do not contain the correct type of data. Please make sure to enter information in all fields correctly.");
                error = true;
            }
        } else {
            responseText.setText("Please select 'Part-Time' or 'Full-time', and enter the appropriate information");
            error = true;
        }

        if (error == false) {
            responseText.setText("The employee was successfully added to the database");
            responseText.paintImmediately(responseText.getVisibleRect());
            //Paint immediately must be used because a method called later will use Thread.sleep

            EmployeeDatabase.addToTable(someEmp);

            //The following lines of code are used to add the new employee 
            //into the jTable that is part of the program    
            DefaultTableModel tableModel = (DefaultTableModel) displayTable.getModel();
            Object[] empInfo = new Object[]{empNum, firstNameBox.getText(), lastNameBox.getText(), dRate, locationText(someEmp.getLocation()), (Math.round(someEmp.calcAnnualPay() * 100.00)) / 100.00};
            tableModel.addRow(empInfo);

            //The following method returns the program to its original state
            toDefault();
        }

    }//GEN-LAST:event_addEmpButtonActionPerformed

    //This method returns the program to its original state
    //Before doing so, it will pause the program for 1 second so that messages 
    //for the user, after successfully adding/modifying, etc. can be seen
    private void toDefault() {
        if (unpause == false) {
            //the program will not pause if the program is currently not unpaused
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(EmpDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        firstNameBox.setText("");
        lastNameBox.setText("");
        deductionsBox.setText("");
        wageBox.setText("");
        hoursBox.setText("");
        weeksBox.setText("");
        salaryBox.setText("");
        responseText.setText("");
        modifyText.setText("");
        removeText.setText("");
        removeBox.setText("");
        modifyBox.setText("");
        empNumBox.setText("");
        locationSelector.setSelectedIndex(0);
        partTimeButton.setSelected(false);
        fullTimeButton.setSelected(false);
        wageLabel.setVisible(false);
        hoursLabel.setVisible(false);
        weeksLabel.setVisible(false);
        wageBox.setVisible(false);
        hoursBox.setVisible(false);
        weeksBox.setVisible(false);
        salaryLabel.setVisible(false);
        salaryBox.setVisible(false);
        modifyButton.setVisible(false);
        cancelModifyButton.setVisible(false);
        cancelModifyEmpButton.setVisible(false);
        modifyEmpButton.setVisible(false);
        cancelText.setVisible(false);
        removeButton.setVisible(false);
        cancelRemoveButton.setVisible(false);
        manualButton.setEnabled(true);
        autoButton.setEnabled(true);
        actionChooser.setEnabled(true);
        empNumBox.setEnabled(true);
        addEmpButton.setVisible(true);
    }

    //Method used to convert a location stored as an integer to its actual location as a string 
    private String locationText(int location) {
        if (location == 0) {
            return "Toronto";
        } else if (location == 1) {
            return "Mississauga";
        } else if (location == 2) {
            return "Brampton";
        } else if (location == 3) {
            return "Caledon";
        } else if (location == 4) {
            return "Vaughan";
        } else {
            return "Markham";
        }
    }

    //used to display the appropriate map, higlighting a certain location when selected
    private void locationSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationSelectorActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout) locationPanel.getLayout();
        //card layout used to overlap all maps over each other, and then select which one 
        //should be on top based on which location is selected
        if (locationSelector.getSelectedIndex() == 0) {
            card.show(locationPanel, "mapN");
            location = -1;
        } else if (locationSelector.getSelectedIndex() == 1) {
            card.show(locationPanel, "mapT");
            location = 0;
        } else if (locationSelector.getSelectedIndex() == 2) {
            card.show(locationPanel, "mapM");
            location = 1;
        } else if (locationSelector.getSelectedIndex() == 3) {
            card.show(locationPanel, "mapB");
            location = 2;
        } else if (locationSelector.getSelectedIndex() == 4) {
            card.show(locationPanel, "mapC");
            location = 3;
        } else if (locationSelector.getSelectedIndex() == 5) {
            card.show(locationPanel, "mapV");
            location = 4;
        } else if (locationSelector.getSelectedIndex() == 6) {
            card.show(locationPanel, "mapK");
            location = 5;
        }
    }//GEN-LAST:event_locationSelectorActionPerformed

    //method used to searh for an employee to modify
    private void searchModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchModifyButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (EmployeeDatabase.searchTable(Integer.parseInt(modifyBox.getText())) != -1) {
                //employee removed and added from table so that it can be used as a variable as searchEmp 
                searchEmp = EmployeeDatabase.removeFromTable((Integer.parseInt(modifyBox.getText())));
                EmployeeDatabase.addToTable(searchEmp);
                modifyText.setText("The employee was found in the database. If you click Modify, you will be able to view and modify this employee's data. (You will be taken to the Information Form.) If you click cancel, the employee will be left in the database unmodified.");
                modifyButton.setVisible(true);
                cancelModifyButton.setVisible(true);
            } else {
                modifyText.setText("The employee number you search for is not in the database. Please try again.");
            }
        } catch (Exception e) {
            modifyText.setText("Please enter an integer greater than zero in the search field.");
        }
    }//GEN-LAST:event_searchModifyButtonActionPerformed

    //if user chooses to modify employee, user is sent to information form
    //and the current data of the employee will be already entered so that it
    //can be modified
    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        // TODO add your handling code here:
        actionChooser.setSelectedIndex(0);
        firstNameBox.setText(searchEmp.getFirstName());
        lastNameBox.setText(searchEmp.getLastName());
        empNumBox.setText(String.valueOf(searchEmp.getEmpNum()));
        empNumBox.setEnabled(false);
        autoButton.setEnabled(false);
        manualButton.setEnabled(false);
        manualButton.setSelected(true);
        //empNum cannot be changed even when modifying employee 
        deductionsBox.setText(String.valueOf(searchEmp.getDeductionsRate()));
        locationSelector.setSelectedIndex(searchEmp.getLocation() + 1);
        locationSelectorActionPerformed(evt);
        if (searchEmp instanceof PartTimeEmployee) {
            PartTimeEmployee empToModify = (PartTimeEmployee) searchEmp;
            partTimeButtonActionPerformed(evt);
            partTimeButton.setSelected(true);
            wageBox.setText(String.valueOf(empToModify.getHourlyWage()));
            hoursBox.setText(String.valueOf(empToModify.getHoursPerWeek()));
            weeksBox.setText(String.valueOf(empToModify.getWeeksPerYear()));
        } else {
            FullTimeEmployee empToModify = (FullTimeEmployee) searchEmp;
            fullTimeButtonActionPerformed(evt);
            fullTimeButton.setSelected(true);
            salaryBox.setText(String.valueOf(empToModify.getAnnualSalary()));
        }
        addEmpButton.setVisible(false);
        modifyEmpButton.setVisible(true);
        actionChooser.setEnabled(false);
        cancelText.setVisible(true);
        cancelModifyEmpButton.setVisible(true);
    }//GEN-LAST:event_modifyButtonActionPerformed

    //Once the user has modified the info on the Information form, this method 
    //calls the addEmp button method, and then removes the older version of the modified employee 
    private void modifyEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyEmpButtonActionPerformed
        // TODO add your handling code here:
        unpause = true;
        EmployeeDatabase.removeFromTable(searchEmp.getEmpNum());
        addEmpButtonActionPerformed(evt);
        if (error == false) {
            //if there is no errors in the modified data for the employee
            //program removes first row in jTable that contains older version of employee data
            DefaultTableModel tableModel = (DefaultTableModel) displayTable.getModel();
            for (int i = 0; i < displayTable.getRowCount() && error == false; i++) {
                if (searchEmp.getEmpNum() == (Integer) tableModel.getValueAt(i, 0)) {
                    tableModel.removeRow(i);
                    error = true; // causes for loop to exit once a single row has been removed, to avoid removing multiple rows
                }
            }
            unpause = false;
            actionChooser.setSelectedIndex(2);
            modifyText.setText("The employee was succesfully modified");
            modifyText.paintImmediately(modifyText.getVisibleRect());
            actionChooser.paintImmediately(actionChooser.getVisibleRect());
            toDefault();
        } else {
            modifyButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_modifyEmpButtonActionPerformed

    //If the user wishes to leave the employee data unchanged, they can do so with this method
    private void cancelModifyEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelModifyEmpButtonActionPerformed
        // TODO add your handling code here:
        unpause = false;
        modifyText.setText("The employee was left in the database unmodified");
        modifyText.paintImmediately(modifyText.getVisibleRect());
        actionChooser.setSelectedIndex(2);
        actionChooser.setEnabled(true);
        actionChooser.paintImmediately(actionChooser.getVisibleRect());
        toDefault();

    }//GEN-LAST:event_cancelModifyEmpButtonActionPerformed

    //Method to remove employee after searching for them
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        EmployeeDatabase.removeFromTable((searchEmp.getEmpNum()));
        DefaultTableModel tableModel = (DefaultTableModel) displayTable.getModel();
        removeText.setText("The employee was succesfully removed");
        removeText.paintImmediately(removeText.getVisibleRect());

        //goes through each row of table, to find which row to remove since employee has been removed
        error = false;
        for (int i = 0; i < displayTable.getRowCount() && error == false; i++) {
            if (searchEmp.getEmpNum() == (Integer) tableModel.getValueAt(i, 0)) {
                tableModel.removeRow(i);
                error = true; // causes for loop to exit once a single row has been removed, to avoid removing multiple rows
            }
        }
        toDefault();
    }//GEN-LAST:event_removeButtonActionPerformed

    //searches for employee to remove
    private void searchRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRemoveButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (EmployeeDatabase.searchTable(Integer.parseInt(removeBox.getText())) != -1) {
                searchEmp = EmployeeDatabase.removeFromTable((Integer.parseInt(removeBox.getText())));
                EmployeeDatabase.addToTable(searchEmp);
                removeText.setText("Would you like to remove Employee Number " + String.valueOf(searchEmp.getEmpNum()) + ", " + searchEmp.getFirstName() + " " + searchEmp.getLastName() + "? If not, click Cancel");
                removeButton.setVisible(true);
                cancelRemoveButton.setVisible(true);
            } else {
                removeText.setText("The employee number you searched for is not in the database. Please try again.");
            }
        } catch (Exception e) {
            removeText.setText("Please enter an integer greater than zero in the search field.");
        }

    }//GEN-LAST:event_searchRemoveButtonActionPerformed

    //Method to let user not remove employee and keep them in database
    private void cancelRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRemoveButtonActionPerformed
        // TODO add your handling code here:
        removeText.setText("The employee was not removed.");
        removeText.paintImmediately(removeText.getVisibleRect());
        toDefault();
    }//GEN-LAST:event_cancelRemoveButtonActionPerformed

    //method to read employee data from text file, using BufferedReader 
    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) displayTable.getModel();
        tableModel.setRowCount(0);
        EmployeeDatabase = new MyHT(10);
        unpause = true;
        int count;
        int empNo;
        String fName;
        String lName;
        double deduct;
        int locate;
        double salary;
        double wage;
        double hours;
        double weeks;
        String empType;
        try {
            BufferedReader reader;
            reader = new BufferedReader(new FileReader("EmployeeDatabase.txt"));
            count = Integer.parseInt(reader.readLine());
            for (int i = 0; i < count; i++) {
                empNo = Integer.parseInt(reader.readLine());
                fName = reader.readLine();
                lName = reader.readLine();
                deduct = Double.parseDouble(reader.readLine());
                locate = Integer.parseInt(reader.readLine());
                empType = reader.readLine();
                if (empType.equals("P")) {
                    wage = Double.parseDouble(reader.readLine());
                    hours = Double.parseDouble(reader.readLine());
                    weeks = Double.parseDouble(reader.readLine());
                    someEmp = new PartTimeEmployee(empNo, fName, lName, deduct, locate, wage, hours, weeks);
                    searchEmp = someEmp;
                } else if (empType.equals("F")) {
                    salary = Double.parseDouble(reader.readLine());
                    someEmp = new FullTimeEmployee(empNo, fName, lName, deduct, locate, salary);
                    searchEmp = someEmp;
                }
                modifyButtonActionPerformed(evt);
                addEmpButtonActionPerformed(evt);
                if (error == true) {
                    throw new RuntimeException();
                }
            }
            unpause = false;
            fileText.setText("The file was successfully read. All data has been added to the database.");
            fileText.paintImmediately(fileText.getVisibleRect());
            toDefault();
            empNumBox.setText("");
        } catch (Exception e) {
            unpause = true;
            fileText.setText("An error occured while attempted to read the file. Please ensure the data is in the correct format.");
            fileText.paintImmediately(fileText.getVisibleRect());
            tableModel.setRowCount(0);
            EmployeeDatabase = new MyHT(10);
            toDefault();
        }
        someEmp = null;
        searchEmp = null;
    }//GEN-LAST:event_readButtonActionPerformed

    //method to save current Employee Database (all info of each Employee) into a text file
    //using BufferedWriter
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        EmployeeInfo writeEmp;
        BufferedWriter writer;
        try {
            File file = new File("EmployeeDatabase.txt");
            writer = new BufferedWriter(new FileWriter(file));
            writer.write(Integer.toString(displayTable.getRowCount()));
            writer.newLine();
            for (int i = 0; i < displayTable.getRowCount(); i++) {
                writeEmp = EmployeeDatabase.removeFromTable((Integer) displayTable.getValueAt(i, 0));
                EmployeeDatabase.addToTable(writeEmp);
                for (int j = 0; j < 4; j++) {
                    writer.write(displayTable.getValueAt(i, j).toString());
                    writer.newLine();
                }
                writer.write(Integer.toString(writeEmp.getLocation()));
                writer.newLine();
                if (writeEmp instanceof PartTimeEmployee) {
                    PartTimeEmployee writeEmp2 = (PartTimeEmployee) writeEmp;
                    writer.write("P");
                    writer.newLine();
                    writer.write(Double.toString(writeEmp2.getHourlyWage()));
                    writer.newLine();
                    writer.write(Double.toString(writeEmp2.getHoursPerWeek()));
                    writer.newLine();
                    writer.write(Double.toString(writeEmp2.getWeeksPerYear()));
                    writer.newLine();
                } else {
                    FullTimeEmployee writeEmp2 = (FullTimeEmployee) writeEmp;
                    writer.write("F");
                    writer.newLine();
                    writer.write(Double.toString(writeEmp2.getAnnualSalary()));
                    writer.newLine();
                }
            }
            writer.close();
            fileText.setText("The data in the Employee Database was succesfully written to the file.");
        } catch (Exception e) {
            fileText.setText("An error occured while writing to file. Contact the developers, or a qualified programmer.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelModifyButtonActionPerformed
        // TODO add your handling code here:
        modifyText.setText("The employee will not be modified.");
        modifyText.paintImmediately(modifyText.getVisibleRect());
        toDefault();
    }//GEN-LAST:event_cancelModifyButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (EmployeeDatabase.searchTable(Integer.parseInt(searchBox.getText())) != -1) {
                searchEmp = EmployeeDatabase.removeFromTable((Integer.parseInt(searchBox.getText())));
                EmployeeDatabase.addToTable(searchEmp);
                searchText.setText("The employee you searched for is in the database. To view this employee's information, search for them on the Modify tab.");
            } else {
                searchText.setText("The employee you searched for is not in the database");
            }
        } catch (Exception e) {
            searchText.setText("Please enter an integer greater than zero in the search field.");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EmpDB().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane actionChooser;
    private javax.swing.JButton addEmpButton;
    private javax.swing.JRadioButton autoButton;
    private javax.swing.JButton cancelModifyButton;
    private javax.swing.JButton cancelModifyEmpButton;
    private javax.swing.JButton cancelRemoveButton;
    private javax.swing.JLabel cancelText;
    private javax.swing.JTextPane deductionsBox;
    private javax.swing.JLabel deductionsLabel;
    private javax.swing.JTable displayTable;
    private javax.swing.JTextPane empNumBox;
    private javax.swing.JLabel empNumLabel;
    private javax.swing.ButtonGroup employeeType;
    private javax.swing.JLabel fiirstNameLabel;
    private javax.swing.JTextArea fileText;
    private javax.swing.JTextPane firstNameBox;
    private javax.swing.JRadioButton fullTimeButton;
    private javax.swing.JTextPane hoursBox;
    private javax.swing.JLabel hoursLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextPane lastNameBox;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JComboBox locationSelector;
    private javax.swing.JRadioButton manualButton;
    private javax.swing.JLabel mapBrampton;
    private javax.swing.JLabel mapCaledon;
    private javax.swing.JLabel mapMarkham;
    private javax.swing.JLabel mapMississauga;
    private javax.swing.JLabel mapNone;
    private javax.swing.JLabel mapToronto;
    private javax.swing.JLabel mapVaughan;
    private javax.swing.JTextPane modifyBox;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton modifyEmpButton;
    private javax.swing.JLabel modifyPrompt;
    private javax.swing.JTextArea modifyText;
    private javax.swing.ButtonGroup numberType;
    private javax.swing.JRadioButton partTimeButton;
    private javax.swing.JButton readButton;
    private javax.swing.JTextPane removeBox;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel removePrompt;
    private javax.swing.JTextArea removeText;
    private javax.swing.JTextArea responseText;
    private javax.swing.JTextPane salaryBox;
    private javax.swing.JLabel salaryLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextPane searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchModifyButton;
    private javax.swing.JButton searchRemoveButton;
    private javax.swing.JTextArea searchText;
    private javax.swing.JPanel toAdd;
    private javax.swing.JPanel toDisplay;
    private javax.swing.JPanel toModify;
    private javax.swing.JPanel toRemove;
    private javax.swing.JPanel toSearch;
    private javax.swing.JTextPane wageBox;
    private javax.swing.JLabel wageLabel;
    private javax.swing.JTextPane weeksBox;
    private javax.swing.JLabel weeksLabel;
    // End of variables declaration//GEN-END:variables
}
